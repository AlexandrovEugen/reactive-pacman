import {Statistic, Type} from "./metrics_pb";

export class Id {
  constructor ();
  getName(): string;
  setName(a: string): void;
  getTagList(): Tag[];
  setTagList(a: Tag[]): void;
  getType(): Type;
  setType(a: Type): void;
  getSyntheticAssociation(): Id;
  setSyntheticAssociation(a: Id): void;
  getDescription(): string;
  setDescription(a: string): void;
  getBaseUnit(): string;
  setBaseUnit(a: string): void;
  toObject(): Id.AsObject;
  serializeBinary(): Uint8Array;
  static deserializeBinary: (bytes: {}) => Id;
}

export namespace Id {
  export type AsObject = {
    Name: string;
    TagList: Tag[];
    Type: Type;
    SyntheticAssociation: Id;
    Description: string;
    BaseUnit: string;
  }
}

export class Measurement {
  constructor ();
  getValue(): number;
  setValue(a: number): void;
  getStatistic(): Statistic;
  setStatistic(a: Statistic): void;
  toObject(): Measurement.AsObject;
  serializeBinary(): Uint8Array;
  static deserializeBinary: (bytes: {}) => Measurement;
}

export namespace Measurement {
  export type AsObject = {
    Value: number;
    Statistic: Statistic;
  }
}

export class Meter {
  constructor ();
  getId(): Id;
  setId(a: Id): void;
  getMeasureList(): Measurement[];
  setMeasureList(a: Measurement[]): void;
  toObject(): Meter.AsObject;
  serializeBinary(): Uint8Array;
  static deserializeBinary: (bytes: {}) => Meter;
}

export namespace Meter {
  export type AsObject = {
    Id: Id;
    MeasureList: Measurement[];
  }
}

export class MetricsSnapshot {
  constructor ();
  getTagsList(): MetricsSnapshot.TagsEntry[];
  setTagsList(a: MetricsSnapshot.TagsEntry[]): void;
  getMetersList(): Meter[];
  setMetersList(a: Meter[]): void;
  toObject(): MetricsSnapshot.AsObject;
  serializeBinary(): Uint8Array;
  static deserializeBinary: (bytes: {}) => MetricsSnapshot;
}

export namespace MetricsSnapshot {
  export type AsObject = {
    TagsList: MetricsSnapshot.TagsEntry[];
    MetersList: Meter[];
  }
  export type TagsEntry = MetricsSnapshotTagsEntry;
}

export class MetricsSnapshotTagsEntry {
  constructor ();
  getKey(): string;
  setKey(a: string): void;
  getValue(): string;
  setValue(a: string): void;
  toObject(): MetricsSnapshotTagsEntry.AsObject;
  serializeBinary(): Uint8Array;
  static deserializeBinary: (bytes: {}) => MetricsSnapshotTagsEntry;
}

export namespace MetricsSnapshotTagsEntry {
  export type AsObject = {
    Key: string;
    Value: string;
  }
}

export class TagsEntry {
  constructor ();
  getKey(): string;
  setKey(a: string): void;
  getValue(): string;
  setValue(a: string): void;
  toObject(): TagsEntry.AsObject;
  serializeBinary(): Uint8Array;
  static deserializeBinary: (bytes: {}) => TagsEntry;
}

export namespace TagsEntry {
  export type AsObject = {
    Key: string;
    Value: string;
  }
}

export class Skew {
  constructor ();
  getTimestamp(): number;
  setTimestamp(a: number): void;
  toObject(): Skew.AsObject;
  serializeBinary(): Uint8Array;
  static deserializeBinary: (bytes: {}) => Skew;
}

export namespace Skew {
  export type AsObject = {
    Timestamp: number;
  }
}

export class Tag {
  constructor ();
  getKey(): string;
  setKey(a: string): void;
  getValue(): string;
  setValue(a: string): void;
  toObject(): Tag.AsObject;
  serializeBinary(): Uint8Array;
  static deserializeBinary: (bytes: {}) => Tag;
}

export namespace Tag {
  export type AsObject = {
    Key: string;
    Value: string;
  }
}

